{
  
    
        "post0": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: . Parameters: . Arguments: . Modularity: . Procedural Abstraction: . What are some other names for procedures?: . Why are procedures effective?: . Challenge 1 below: Add the command that will call the procedure. . decimal = 7 def convertToBinary(n): (decimal) print() . Challenge 2 below: Complete the follwing timeConversion procedure in JavaScript (This is a bonus 0.1 if completed!) . function timeConversion(s) { } var input = &quot;09:00:00PM&quot;; timeConversion(input); . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . def charToBinary(x):() # The output shown below is the output you are supposed to get . &#39;&#39;APCSP&#39;&#39; in binary is [1000001, 1010000, 1000011, 1010011, 1010000] .",
            "url": "https://h4seeb-cmd.github.io/TeamTurtle/2022/12/07/notetemplate.html",
            "relUrl": "/2022/12/07/notetemplate.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson Plan",
            "content": "3.12: Calling Procedures . A Procedure is a named group of programming instructions that may have parameters and return values. | Procedures can also be referred as method or function, depending on the language | Parameters are input values of a procedure. | Arguments specify the values of the parameters when a procedure is called | . A procedure call interrupts a series of statements and makes the program execute the statements in the procedure. After executing, it will return to the original call and finish the statements. . In order to determine what the result of a procedure is, you need to carefully examine the code line by line . A procedure MAY or MAY NOT return a value (a number or boolean (true or false)). . Before we start writing the procedure, we need to know what arguments the procedures require and and what type of data the procedure will return. | We need to be able to call the procedure. | To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure (there may not be parameters, but parenthesis must be there). | . Here is an example . def square(x): # def is used to define a procedure; in this case, it is called square, which is a math function that squares input values. The paramter is x inside of the parenthesis. return x*x # x is multiplied by x print(square(6)) # Here, the function is called with the argument &quot;6&quot; which essentially replaces x for 6. . 36 . Lets look at more examples: . Here is another square function, this time, with different names, parameters, and arguments. Can you spot them? . def multiplyNum(num): # procedure is defined with the parameter num return num * 8 # num will be multipled by 8 result = multiplyNum(8) # 8 becomes the num (aka argument); afterwards, 8 is multiplied by 8 to become 64. print(result) . 64 . a = 10 b = 6.7 def subNumbers(x,y): # procedure is defined with paramters x and y return (x-y) result = subNumbers(a, b) # here, the result calls the procedure subNumbers and tells the procedure to subtract a and b. print(a, &quot;-&quot;, b, &quot;=&quot;, result) # afterwards, it prints here . 10 - 6.7 = 3.3 . Challenge 1 Let&#39;s try an example with a decimal to binary convertor. Please take time to create a conversion to from decimal to binary and call the procedure and print. | . decimal = 7 def convertToBinary(n): (decimal) print() . 3.13 Developing Procedures: . Developing a procedure: What questions do I need to ask myself? What am I going to name my procedure? (It should reflect the purpose of the code) | What parameters do I need? | What data would I need to take in to accomplish my goal? | Do I want my procedure to give a numerical value, or complete an action? | . | . What is the purpose of this code? Is it returning a numerical value, or simply completing an action? . a = 10 b = 200 def multiplication(a, b): # function that defines a and b being multiplied product = a * b return product answer = multiplication(a, b) # calls the multiplication procedure and replaces a and b with arguments that we stated at the start; a=10 and b=200. print(a, &quot;x&quot;, b, &quot;=&quot;, answer) . 10 x 200 = 2000 . What is procedural abstraction? . One type of abstraction is procedural abstraction, which provides a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it. Have variable parameters | Code handles different situations depending on how its parameters are set/called | It allows a solution to a large problem based on the solutions of smaller subproblems. | . | Separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality is called modularity | . What is a benefit of using procedures? . We have the ability to alter the result without actually changing the calls to the program | Convenient to change the actions if there is an error in the code (modularity) able to break the code up and abstract what different part of the code does; helps identiy bugs, error, etc. | MUCH better than reviewing code WITHOUT a procedure (you would have to look at every line by line) | . | . Here is an example of modularity and the benefits of procedures. Which is better? This is not any particulur language, but it helps us understand why procedures are beneficial . Say a object is moving across a grid and wants to get to the finish line. This is what the object is doing: . rotate_left() | move_forward() | rotate_right() | move_forward() | rotate_right() | move_forward() | rotate_left() | move_forward() | move_forward() | . Say the object doesn&#39;t end up at the finish line. It is going to be a pain to individually look at every line and see what to fix (of course, in this example, it wouldn&#39;t be that bad, but we&#39;re assuming that it will be much longer). . This is where procedures come in handy. . We can split up the code into differnet motions. . rotate_left() | move_forward() | rotate_right() | move_forward() | rotate_right() | move_forward() | . We can call this whole segment detourRight() . rotate_left() | move_forward() | move_forward() | . And we can call this turnCorner() . Seperating the long code into two different procedures allows us to individually point at what might have gone wrong during the process and is therefore essential to coders. . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. The only contraint is that you must use a procedure. Doing this will get you a 3. . def charToBinary(x): .",
            "url": "https://h4seeb-cmd.github.io/TeamTurtle/2022/12/07/lesson.html",
            "relUrl": "/2022/12/07/lesson.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Procedures using JavaScript",
            "content": "As we learned before, when we define procedures in python, we used &quot;def.&quot; However, in JavaScript, we use function as opposed to def in python. Here is a basic procedure to start with. With python we would define the function with &quot;def&quot; but here we are using &quot;function.&quot; After that, it is nearly the same for the rest of the program. . function subtraction(a,b) { return a - b; } subtraction(10,12) . -2 . Example 1: Postive and Negatives Procedure . function plusMinus(arr) { var pos = 0; var neg = 0; var zero = 0; var length = arr.length; for (var i = 0; i &lt; arr.length; i++) { if (arr[i] &gt; 0) { pos += 1; } else if (arr[i] &lt; 0) { neg += 1; } else { zero += 1; } } console.log(&quot;There are &quot; + arr.length + &quot; total numbers&quot;); console.log(&quot;There are &quot; + pos + &quot; positive numbers&quot;); console.log(&quot;There are &quot; + neg + &quot; negative numbers&quot;); console.log(&quot;There are &quot; + zero + &quot; zeroes&quot;); } var array = [1, 1, 0 , -1, -1]; plusMinus(array); . There are 5 total numbers There are 2 positive numbers There are 2 negative numbers There are 1 zeroes . Challenge 2 2: Time Conversion Procedure (Bonus 0.1 points) . function timeConversion(s) { } var input = &quot;09:00:00PM&quot;; timeConversion(input); . 21:00:00 .",
            "url": "https://h4seeb-cmd.github.io/TeamTurtle/2022/12/07/javascriptexamples.html",
            "relUrl": "/2022/12/07/javascriptexamples.html",
            "date": " • Dec 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "hi .",
          "url": "https://h4seeb-cmd.github.io/TeamTurtle/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://h4seeb-cmd.github.io/TeamTurtle/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}